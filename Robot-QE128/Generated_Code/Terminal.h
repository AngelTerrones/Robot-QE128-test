/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : Terminal.h
**     Project     : ProcessorExpert
**     Processor   : MCF51QE128CLH
**     Component   : AsynchroSerial
**     Version     : Component 02.601, Driver 01.33, CPU db: 3.00.080
**     Compiler    : CodeWarrior ColdFireV1 C Compiler
**     Date/Time   : 2013-04-22, 15:48, # CodeGen: 52
**     Abstract    :
**         This component "AsynchroSerial" implements an asynchronous serial
**         communication. The component supports different settings of
**         parity, word width, stop-bit and communication speed,
**         user can select interrupt or polling handler.
**         Communication speed can be changed also in runtime.
**         The component requires one on-chip asynchronous serial channel.
**     Settings    :
**         Serial channel              : SCI1
**
**         Protocol
**             Init baud rate          : 57600baud
**             Width                   : 8 bits
**             Stop bits               : 1
**             Parity                  : none
**             Breaks                  : Disabled
**             Input buffer size       : 15
**             Output buffer size      : 15
**
**         Registers
**             Input buffer            : SCI1D     [0xFFFF8027]
**             Output buffer           : SCI1D     [0xFFFF8027]
**             Control register        : SCI1C1    [0xFFFF8022]
**             Mode register           : SCI1C2    [0xFFFF8023]
**             Baud setting reg.       : SCI1BD    [0xFFFF8020]
**             Special register        : SCI1S1    [0xFFFF8024]
**
**         Input interrupt
**             Vector name             : Vsci1rx
**             Priority                : 440
**
**         Output interrupt
**             Vector name             : Vsci1tx
**             Priority                : 440
**
**         Used pins:
**         ----------------------------------------------------------
**           Function | On package           |    Name
**         ----------------------------------------------------------
**            Input   |     34               |  PTB0_KBI1P4_RxD1_ADP4
**            Output  |     33               |  PTB1_KBI1P5_TxD1_ADP5
**         ----------------------------------------------------------
**
**
**
**     Contents    :
**         Enable          - byte Terminal_Enable(void);
**         Disable         - byte Terminal_Disable(void);
**         EnableEvent     - byte Terminal_EnableEvent(void);
**         DisableEvent    - byte Terminal_DisableEvent(void);
**         RecvChar        - byte Terminal_RecvChar(Terminal_TComData *Chr);
**         SendChar        - byte Terminal_SendChar(Terminal_TComData Chr);
**         RecvBlock       - byte Terminal_RecvBlock(Terminal_TComData *Ptr, word Size, word *Rcv);
**         SendBlock       - byte Terminal_SendBlock(Terminal_TComData *Ptr, word Size, word *Snd);
**         ClearRxBuf      - byte Terminal_ClearRxBuf(void);
**         ClearTxBuf      - byte Terminal_ClearTxBuf(void);
**         CharsInRxBuf    - byte Terminal_CharsInRxBuf(word *Chr);
**         GetCharsInRxBuf - word Terminal_GetCharsInRxBuf(void);
**         GetCharsInTxBuf - word Terminal_GetCharsInTxBuf(void);
**         GetTxComplete   - bool Terminal_GetTxComplete(void);
**
**     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __Terminal
#define __Terminal

/* MODULE Terminal. */

#include "Cpu.h"




#ifndef __BWUserType_Terminal_TError
#define __BWUserType_Terminal_TError
  /*lint -save  -esym(960,18.4) Disable MISRA rule (18.4) checking. */
  typedef union {
    byte err;
    struct {
      /*lint -save  -e46 Disable MISRA rule (6.4) checking. */
      bool OverRun  : 1;               /* Overrun error flag */
      bool Framing  : 1;               /* Framing error flag */
      bool Parity   : 1;               /* Parity error flag */
      bool RxBufOvf : 1;               /* Rx buffer full error flag */
      bool Noise    : 1;               /* Noise error flag */
      bool Break    : 1;               /* Break detect */
      bool LINSync  : 1;               /* LIN synchronization error */
      bool BitError  : 1;              /* Bit error flag - mismatch to the expected value happened. */
      /*lint -restore Enable MISRA rule (6.4) checking. */
    } errName;
  } Terminal_TError;                   /* Error flags. For languages which don't support bit access is byte access only to error flags possible. */
  /*lint -restore  +esym(960,18.4) Enable MISRA rule (18.4) checking. */
#endif

#ifndef __BWUserType_Terminal_TComData
#define __BWUserType_Terminal_TComData
  typedef byte Terminal_TComData ;     /* User type for communication. Size of this type depends on the communication data width. */
#endif

#define Terminal_INP_BUF_SIZE 0x0FU    /* Input buffer size */
#define Terminal_OUT_BUF_SIZE 0x0FU    /* Output buffer size */

extern volatile bool Terminal_EnEvent; /* Enable/Disable events */

extern byte Terminal_OutLen;           /* Length of the output buffer content */
extern byte Terminal_InpLen;           /* Length of the input buffer content */

byte Terminal_Enable(void);
/*
** ===================================================================
**     Method      :  Terminal_Enable (component AsynchroSerial)
**
**     Description :
**         Enables the component - it starts the send and receive
**         functions. Events may be generated
**         ("DisableEvent"/"EnableEvent").
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte Terminal_Disable(void);
/*
** ===================================================================
**     Method      :  Terminal_Disable (component AsynchroSerial)
**
**     Description :
**         Disables the component - it stops the send and receive
**         functions. No events will be generated.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define Terminal_EnableEvent()\
  (Terminal_EnEvent = TRUE, (byte)ERR_OK) /* Set the flag "events enabled" */
/*
** ===================================================================
**     Method      :  Terminal_EnableEvent (component AsynchroSerial)
**
**     Description :
**         Enables the events. This method is available if the
**         interrupt service/event property is enabled and at least one
**         event is enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define Terminal_DisableEvent() (Terminal_EnEvent = FALSE, (byte)ERR_OK) /* Set the flag "events disabled" */
/*
** ===================================================================
**     Method      :  Terminal_DisableEvent (component AsynchroSerial)
**
**     Description :
**         Disables the events. This method is available if the
**         interrupt service/event property is enabled and at least one
**         event is enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte Terminal_RecvChar(Terminal_TComData *Chr);
/*
** ===================================================================
**     Method      :  Terminal_RecvChar (component AsynchroSerial)
**
**     Description :
**         If any data is received, this method returns one character,
**         otherwise it returns an error code (it does not wait for
**         data). This method is enabled only if the receiver property
**         is enabled.
**         [Note:] Because the preferred method to handle error and
**         break exception in the interrupt mode is to use events
**         <OnError> and <OnBreak> the return value ERR_RXEMPTY has
**         higher priority than other error codes. As a consequence the
**         information about an exception in interrupt mode is returned
**         only if there is a valid character ready to be read.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to a received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RXEMPTY - No data in receiver
**                           ERR_BREAK - Break character is detected
**                           (only when the <Interrupt service> property
**                           is disabled and the <Break signal> property
**                           is enabled)
**                           ERR_COMMON - common error occurred (the
**                           <GetError> method can be used for error
**                           specification)
** ===================================================================
*/

byte Terminal_SendChar(Terminal_TComData Chr);
/*
** ===================================================================
**     Method      :  Terminal_SendChar (component AsynchroSerial)
**
**     Description :
**         Sends one character to the channel. If the component is
**         temporarily disabled (Disable method) SendChar method only
**         stores data into an output buffer. In case of a zero output
**         buffer size, only one character can be stored. Enabling the
**         component (Enable method) starts the transmission of the
**         stored data. This method is available only if the
**         transmitter property is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/

byte Terminal_RecvBlock(Terminal_TComData *Ptr,word Size,word *Rcv);
/*
** ===================================================================
**     Method      :  Terminal_RecvBlock (component AsynchroSerial)
**
**     Description :
**         If any data is received, this method returns the block of
**         the data and its length (and incidental error), otherwise it
**         returns an error code (it does not wait for data).
**         This method is available only if non-zero length of the
**         input buffer is defined and the receiver property is enabled.
**         If less than requested number of characters is received only
**         the available data is copied from the receive buffer to the
**         user specified destination. The value ERR_EXEMPTY is
**         returned and the value of variable pointed by the Rcv
**         parameter is set to the number of received characters.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Ptr             - Pointer to the block of received data
**         Size            - Size of the block
**       * Rcv             - Pointer to real number of the received data
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_RXEMPTY - The receive buffer didn't
**                           contain the requested number of data. Only
**                           available data has been returned.
**                           ERR_COMMON - common error occurred (the
**                           GetError method can be used for error
**                           specification)
** ===================================================================
*/

byte Terminal_SendBlock(const Terminal_TComData * Ptr,word Size,word *Snd);
/*
** ===================================================================
**     Method      :  Terminal_SendBlock (component AsynchroSerial)
**
**     Description :
**         Sends a block of characters to the channel.
**         This method is available only if non-zero length of the
**         output buffer is defined and the transmitter property is
**         enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Ptr             - Pointer to the block of data to send
**         Size            - Size of the block
**       * Snd             - Pointer to number of data that are sent
**                           (moved to buffer)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_TXFULL - It was not possible to send
**                           requested number of bytes
** ===================================================================
*/

byte Terminal_ClearRxBuf(void);
/*
** ===================================================================
**     Method      :  Terminal_ClearRxBuf (component AsynchroSerial)
**
**     Description :
**         Clears the receive buffer.
**         This method is available only if non-zero length of the
**         input buffer is defined and the receiver property is enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte Terminal_ClearTxBuf(void);
/*
** ===================================================================
**     Method      :  Terminal_ClearTxBuf (component AsynchroSerial)
**
**     Description :
**         Clears the transmit buffer.
**         This method is available only if non-zero length of the
**         output buffer is defined and the receiver property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte  Terminal_CharsInRxBuf(word *Chr);
/*
** ===================================================================
**     Method      :  Terminal_CharsInRxBuf (component AsynchroSerial)
**
**     Description :
**         Returns the number of characters in the input buffer. This
**         method is available only if the receiver property is enabled.
**         [deprecated method]
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to the number of characters in the
**                           input buffer
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define Terminal_GetCharsInRxBuf() \
((word) Terminal_InpLen)               /* Return number of chars in receive buffer */
/*
** ===================================================================
**     Method      :  Terminal_GetCharsInRxBuf (component AsynchroSerial)
**
**     Description :
**         Returns the number of characters in the input buffer. This
**         method is available only if the receiver property is enabled.
**     Parameters  : None
**     Returns     :
**         ---             - The number of characters in the input
**                           buffer.
** ===================================================================
*/

#define Terminal_GetCharsInTxBuf() \
((word) Terminal_OutLen)               /* Return number of chars in the transmitter buffer */
/*
** ===================================================================
**     Method      :  Terminal_GetCharsInTxBuf (component AsynchroSerial)
**
**     Description :
**         Returns the number of characters in the output buffer. This
**         method is available only if the transmitter property is
**         enabled.
**     Parameters  : None
**     Returns     :
**         ---             - The number of characters in the output
**                           buffer.
** ===================================================================
*/

__interrupt void Terminal_InterruptRx(void);
/*
** ===================================================================
**     Method      :  Terminal_InterruptRx (component AsynchroSerial)
**
**     Description :
**         The method services the receive interrupt of the selected 
**         peripheral(s) and eventually invokes the component's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

__interrupt void Terminal_InterruptTx(void);
/*
** ===================================================================
**     Method      :  Terminal_InterruptTx (component AsynchroSerial)
**
**     Description :
**         The method services the transmit interrupt of the selected 
**         peripheral(s) and eventually invokes the component's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

__interrupt void Terminal_InterruptError(void);
/*
** ===================================================================
**     Method      :  Terminal_InterruptError (component AsynchroSerial)
**
**     Description :
**         The method services the error interrupt of the selected 
**         peripheral(s) and eventually invokes the component's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


void Terminal_Init(void);
/*
** ===================================================================
**     Method      :  Terminal_Init (component AsynchroSerial)
**
**     Description :
**         Initializes the associated peripheral(s) and the component's 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#define Terminal_GetTxComplete()\
  ((bool) getRegBit(SCI1S1, TC))
/*
** ===================================================================
**     Method      :  Terminal_GetTxComplete (component AsynchroSerial)
**
**     Description :
**         Returns whether the transmitter is finished transmitting all
**         data, preamble, and break characters and is idle. It can be
**         used to determine when it is safe to switch a line driver (e.
**         g. in RS-485 applications). This method is available only if
**         event <OnTxComplete> is disabled.
**     Parameters  : None
**     Returns     :
**         ---             - Transmission process completeness.
** ===================================================================
*/


/* END Terminal. */

/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale ColdFireV1 series of microcontrollers.
**
** ###################################################################
*/

#endif /* ifndef __Terminal */
